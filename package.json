// grunt中所有的插件安装过程都和grunt一样,但是他们的执行都是基于grunt的,因此才能把grunt叫做一个“构建工具”(Grunt没有具体的作用,但是它能把有具体作用的一个一个插件组合起来形成一个整体效应)
// 注:'grunt-cli'会执行'package.json'文件中指定安装的grunt的版本(这样设计的目的是兼容不同版本的grunt),从而来读取'Gruntfile.js'下的各个插件来执行项目的自动化

// 注1:'bower.json'的作用跟'package.json'类似,也是方便新用户根据其中的配置项安装项目所用到的插件和组件
// 注2:输入'bower.init'用来生成'bower.json'文件
// 注3:'?name (xxxx)'是用来询问用户当前项目的名字是什么,括号里是默认的名字,其余的类似
// 注4:'?main file'是用来询问用户当前项目主要依赖的入口文件
// 注5:'.bowerrc'放在项目的根目录下面,'directory'表示将npm包就被安装到的位置路径
// 注6:我们在bower的项目下引用js还是要通过类似'../xxx/jquery.min.js'的格式引入bower下载下来的js,但是这样会非常非常的麻烦,所以这个时候就要结合grunt了

// Node.js提供一个名为'package.json'的文件,如果我们在安装的时候没有在'install'的后面跟任何命令的话,则
// NPM会到当前目录下找寻这个'package.json'的文件,找到后就按照声明里面的内容去进行安装,如果没找到则报错
{
  // 当前这个项目的名称
  "name": "movie",
  // 当前这个项目的版本
  "version": "0.2.0",
  "description": "Everythinng about movie app for  imooc",
  "main": "app.js",
  "directories": {
    "test": "test"
  },
  // NPM主要查看的项就是这个'dependencies'键值对,判断当前项目依赖哪些NPM的组件
  // 注:我上传源码时候肯定会把package.json上传上去,而package.json中的“devDependencies”就记录了这个系统的开发依赖项,然后我通过nodejs的npm即可批量安装
  // 这个时候在新建文档下执行NPM命令且install后面没有跟任何参数,则grunt会自动找到'package.json'下的'devDependencies'参数,将其中的依赖包安装到新的目录下,就省去了新用户一个一个从原来项目中复制过来的烦恼
  "dependencies": {
    "async": "~0.2.10",
    "bcrypt": "~0.7.8",
    "connect-mongo": "~0.3.3",
    "crypto": "~0.0.3",
    "express": "~3.4.8",
    "grunt": "~0.4.5",
    "grunt-concurrent": "~0.4.3",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-less": "~0.11.4",
    "grunt-contrib-uglify": "~0.5.1",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-mocha-test": "~0.11.0",
    "grunt-nodemon": "~0.1.2",
    "jade": "~1.3.0",
    "latest": "~0.1.2",
    "moment": "~2.5.1",
    "mongoose": "~3.8.14",
    "underscore": "~1.6.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://git.oschina.net/wolf18387/imooc-movie.git"
  },
  "keywords": [
    "lessonns"
  ],
  "author": "Scott",
  "license": "MIT"
}
